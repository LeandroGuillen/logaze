{"version":3,"sources":["data.js","Grid.jsx","About.jsx","Faq.jsx","RescrapeToast.jsx","App.js","serviceWorker.js","index.js"],"names":["loadFromJsonbin","jsonbinAddr","fetch","then","response","json","renderLink","value","Button","variant","size","target","rel","href","renderBoolean","renderDecimal","decimalPlaces","toFixed","nullCheck","fn","prefixDollarSign","s","Grid","data","gridOptions","columnDefs","headerName","field","width","cellRendererFramework","cellRenderer","filter","sort","defaultColDef","sortable","resizable","suppressCellSelection","enableCellTextSelection","suppressHorizontalScroll","rowHeight","headerHeight","className","rowData","multiSortKey","onFirstDataRendered","params","columnApi","autoSizeColumns","About","props","Modal","aria-labelledby","centered","Header","closeButton","Title","id","Body","Footer","onClick","onHide","Faq","RescrapeToast","beforeOnClose","beforeShow","afterOnClose","afterShow","style","position","top","right","zIndex","Toast","onClose","show","delay","autohide","downloadCsv","filename","console","log","dldata","element","document","createElement","setAttribute","encodeURIComponent","display","body","appendChild","click","removeChild","download","conv","replacer","key","header","Object","keys","csv","map","row","fieldName","JSON","stringify","join","unshift","dataToCsv","App","useState","setData","useEffect","useData","aboutModalShow","setAboutModalShow","faqModalShow","setFaqModalShow","rescrapeBeforeToastShow","setRescrapeBeforeToastShow","rescrapeAfterToastShow","setRescrapeAfterToastShow","Navbar","bg","Brand","alt","src","height","Nav","Link","Text","length","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bdae3c2c.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const loadFromJsonbin = () => {\n  const binId = '5dac6fed5751f76337fd4ac2';\n  const jsonbinAddr = `https://api.jsonbin.io/b/${binId}/latest`;\n\n  return fetch(jsonbinAddr).then(response => response.json());\n};\n\nexport const useData = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    loadFromJsonbin().then(setData);\n  }, []);\n\n  return data;\n};\n\nexport const dataToCsv = (data) => {\n  console.log({conv: data});\n  const replacer = (key, value) => value === null ? '' : value;\n  const header = Object.keys(data[0]);\n\n  let csv = data.map(row => header.map(\n    fieldName => JSON.stringify(row[fieldName], replacer)).join(','));\n  csv.unshift(header.join(','));\n  return csv.join('\\r\\n');\n}\n\nexport const download = (filename, data) => {\n  console.log({dldata: data});\n  let element = document.createElement('a');\n  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(data));\n  element.setAttribute('download', filename);\n  element.style.display = 'none';\n  document.body.appendChild(element);\n  element.click();\n  document.body.removeChild(element);\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button'\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham-dark.css';\n\n\nconst renderLink = (value) => (\n  <Button variant=\"light\" size=\"sm\" target=\"_blank\" rel=\"noopener noreferrer\" href={value}>\n    Buy\n  </Button>\n);\n\nconst renderBoolean = (value) => value ? 'Yes' : 'No';\n\nconst renderDecimal = (decimalPlaces) => (value) =>\n      value === null ? value : value.toFixed(decimalPlaces);\n\nconst nullCheck = (fn) => ({ value }) => value === null ? value : fn(value);\n\nconst prefixDollarSign = (fn) => (s) => `$${fn(s)}`;\n\nconst Grid = ({ data }) => {\n    const columnDefs = [\n    {headerName: 'USD', field: 'url', width: 65,\n     cellRendererFramework: nullCheck(renderLink)},\n    {headerName: 'Price', field: 'price', width: 70,\n     cellRenderer: nullCheck(prefixDollarSign(renderDecimal(2))),\n     filter: 'agNumberColumnFilter', sort: 'asc'},\n    {headerName: 'Type', field: 'product-type', width: 70},\n    {headerName: 'Model', field: 'model'},\n    {headerName: 'Screen Size', field: 'screen-size', width: 70,\n     cellRenderer: nullCheck(renderDecimal(1)), filter: 'agNumberColumnFilter'},\n    {headerName: 'Resolution', field: 'resolution', width: 100},\n    {headerName: 'IPS Screen?', field: 'screen-has-ips', width: 70,\n     cellRenderer: nullCheck(renderBoolean)},\n    {headerName: 'Display', field: 'display-type'},\n    {headerName: 'Memory Size', field: 'memory-size', width: 70},\n    {headerName: 'Hard Drive Type', field: 'hard-drive-type', width: 70},\n    {headerName: 'Hard Drive Size', field: 'hard-drive-size', width: 70},\n    {headerName: 'Processor Brand', field: 'processor-brand', width: 70},\n    {headerName: 'Processor Range', field: 'processor-range', width: 80},\n    {headerName: 'Processor', field: 'processor'},\n    {headerName: 'Wireless', field: 'wireless'},\n    {headerName: 'Graphics', field: 'graphics'},\n    {headerName: 'Touchscreen?', field: 'screen-supports-touch', width: 70,\n     cellRenderer: nullCheck(renderBoolean)},\n    {headerName: 'Hard Drive', field: 'hard-drive'},\n    {headerName: 'Memory', field: 'memory'},\n    {headerName: 'Memory Soldered?', field: 'memory-soldered', width: 70,\n     cellRenderer: nullCheck(renderBoolean)},\n    {headerName: 'Processor Cache', field: 'processor-cache', width: 70},\n    {headerName: 'Battery', field: 'battery'},\n    {headerName: 'Warranty', field: 'warranty'},\n    {headerName: 'Operating System', field: 'operating-system'},\n    {headerName: 'Original Price', field: 'orig-price', width: 70,\n     cellRenderer: nullCheck(prefixDollarSign(renderDecimal(2))),\n     filter: 'agNumberColumnFilter'},\n    {headerName: 'Pointing Device', field: 'pointing-device'},\n    {headerName: 'Part Number', field: 'part-number'},\n    {headerName: 'Keyboard', field: 'keyboard'},\n    {headerName: 'Bluetooth', field: 'bluetooth', width: 70},\n  ];\n\n  const defaultColDef = {\n    sortable: true,\n    filter: true,\n    resizable: true,\n  };\n\n  const gridOptions = {\n    columnDefs,\n    defaultColDef,\n    suppressCellSelection: true,\n    enableCellTextSelection: true,\n    suppressHorizontalScroll: true,\n    rowHeight: 40,\n    headerHeight: 40,\n  };\n\n  const onFirstDataRendered = (params) => params.columnApi.autoSizeColumns();\n\n  return (\n        <div className=\"ag-theme-balham-dark table-wrapper\">\n        <AgGridReact\n          gridOptions={gridOptions}\n          rowData={data}\n          multiSortKey={'ctrl'}\n          onFirstDataRendered={onFirstDataRendered}\n        />\n      </div>\n  );\n}\n\nexport default Grid;\n","import React from 'react';\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\n\nconst About = (props) => (\n  <Modal\n    {...props}\n    size=\"lg\"\n    aria-labelledby=\"contained-modal-title-vcenter\"\n    centered\n  >\n    <Modal.Header closeButton>\n      <Modal.Title id=\"contained-modal-title-vcenter\">\n        About\n      </Modal.Title>\n    </Modal.Header>\n    <Modal.Body>\n      <p>\n        When I wanted to buy a refurbished ThinkPad, I used <a href=\"https://lw.ofwiz.com\">lw.ofwiz</a>,\n        but found it lacking because I couldn't filter for specs important to\n        me, such as screen resolution, screen size, and whether the ThinkPad <a\n        href=\"https://www.reddit.com/r/thinkpad/\">had an IPS screen</a>.\n      </p>\n\n      <p>So I went all out to build logaze, to watch Lenovo's refurbished ThinkPad prices.</p>\n\n      <small>p.s. Thanks for loading this page! You're contributing to scraping\n        the Lenovo Outlet. (see faq)</small>\n    </Modal.Body>\n    <Modal.Footer>\n      <small>Built with love by <a href=\"https://github.com/ackerleytng\">ackerleytng</a> in Clojure (<a href=\"https://github.com/ackerleytng/logaze-scraper\">scraper</a>) and React (<a href=\"https://github.com/ackerleytng/logaze\">frontend</a>)</small>{' '}\n      <Button onClick={props.onHide}>Close</Button>\n    </Modal.Footer>\n  </Modal>\n);\n\nexport default About;\n","import React from 'react';\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\n\nconst Faq = (props) => (\n  <Modal\n    {...props}\n    size=\"lg\"\n    aria-labelledby=\"contained-modal-title-vcenter\"\n    centered\n  >\n    <Modal.Header closeButton>\n      <Modal.Title id=\"contained-modal-title-vcenter\">\n        FAQ\n      </Modal.Title>\n    </Modal.Header>\n    <Modal.Body>\n      <dl>\n        <dt>Why does Lenovo say there are 235 (big number) products found but you only show 160 (smaller)?</dt>\n        <dd>Some of those are already out of stock, I filtered out anything that is out of stock.</dd>\n      </dl>\n      <dl>\n        <dt>How am I contributing to scraping Lenovo Outlet?</dt>\n        <dd>Whenever you open this page, your browser will check when the last update was, and if the last scraping time was more than 4 hours ago, your browser will trigger the scraper automatically. Thank you for helping to trigger the scraping! (not implemented yet. TODO) (Nope, your computer is not being used to scrape Lenovo Outlet.)</dd>\n      </dl>\n      <dl>\n        <dt>What is your backend/scraper?</dt>\n        <dd>My backend is technically just a json file; the scraper resides on heroku. The heroku free dyno sleeps if it does not receive any traffic for 30 mins, and it takes really long to wake up after sleeping, hence I decided to cache results in a json file for better UX.</dd>\n      </dl>\n      <dl>\n        <dt>How are you caching scraping results?</dt>\n        <dd>I'm using <a href=\"https://jsonbin.io\">jsonbin.io</a>! They are a really great service that is like pastebin, but for json. They have a nice API for updating bins, and they allow you to update the same bin with new data!</dd>\n      </dl>\n      <dl>\n        <dt>Is this insecure, since the data being served from jsonbin.io could be written to by anyone?</dt>\n        <dd>Yes, this means that if someone writes to the bin at <a href=\"https://jsonbin.io\">jsonbin.io</a>, they could potentially use XSS on you. I believe <a href=\"https://www.ag-grid.com\">ag-grid</a> escapes cell contents, but I will verify that. (TODO)</dd>\n      </dl>\n      <dl>\n        <dt>Why not secure the bin at jsonbin.io?</dt>\n        <dd>I wish <a href=\"https://jsonbin.io\">jsonbin.io</a> allowed users to protect bins from writes with a key, but allow public access to the bin. As I understand it, they do have private bins, but that means needing the same key for access. If I have to embed the key in the web client, we're back to square one in protecting the bin from unauthorized writes.</dd>\n      </dl>\n    </Modal.Body>\n    <Modal.Footer>\n      <Button onClick={props.onHide}>Close</Button>\n    </Modal.Footer>\n  </Modal>\n);\n\nexport default Faq;\n","import React from 'react';\nimport Toast from 'react-bootstrap/Toast'\n\nconst RescrapeToast = ({ beforeOnClose, beforeShow, afterOnClose, afterShow }) => (\n  <div\n    style={{\n      position: 'absolute',\n      top: '1%',\n      right: '1%',\n      zIndex: 10\n    }}\n  >\n    <Toast onClose={beforeOnClose} show={beforeShow}\n           delay={3000} autohide>\n      <Toast.Header>\n        <strong className=\"mr-auto\">Scraper triggered!</strong>\n      </Toast.Header>\n      <Toast.Body>Scraper is starting up...</Toast.Body>\n    </Toast>\n    <Toast onClose={afterOnClose} show={afterShow}\n           delay={3000} autohide>\n      <Toast.Header>\n        <strong className=\"mr-auto\">Scraping triggered!</strong>\n      </Toast.Header>\n      <Toast.Body>Wait a bit, and then refresh this page!</Toast.Body>\n    </Toast>\n  </div>\n);\n\nexport default RescrapeToast;\n","import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\n\nimport {\n  useData,\n  loadFromJsonbin,\n  dataToCsv,\n  download\n} from './data';\nimport Grid from './Grid'\nimport About from './About'\nimport Faq from './Faq'\nimport RescrapeToast from './RescrapeToast'\n\n\nconst downloadCsv = () => loadFromJsonbin().then(data => download('logaze.csv', dataToCsv(data)));\n\nconst App = () => {\n  const data = useData();\n\n  const [aboutModalShow, setAboutModalShow] = useState(false);\n  const [faqModalShow, setFaqModalShow] = useState(false);\n  const [rescrapeBeforeToastShow, setRescrapeBeforeToastShow] = useState(false);\n  const [rescrapeAfterToastShow, setRescrapeAfterToastShow] = useState(false);\n\n  const rescrape = () => {\n    setRescrapeBeforeToastShow(true);\n    fetch(\"http://logaze.herokuapp.com/\").then(() => setRescrapeAfterToastShow(true))\n  };\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">\n          <img\n            alt=\"\"\n            src=\"/logo.svg\"\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n          />{' '}\n          logaze\n        </Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link onClick={() => setAboutModalShow(true)}>about</Nav.Link>\n          <Nav.Link onClick={() => setFaqModalShow(true)}>faq</Nav.Link>\n          <Nav.Link onClick={() => rescrape()}>rescrape</Nav.Link>\n          <Nav.Link onClick={downloadCsv}>csv</Nav.Link>\n        </Nav>\n        <Nav>\n          <Navbar.Text>\n            <small>{data.length} laptops found</small>\n          </Navbar.Text>\n        </Nav>\n      </Navbar>\n\n      <RescrapeToast\n        beforeOnClose={() => setRescrapeBeforeToastShow(false)}\n        beforeShow={rescrapeBeforeToastShow}\n        afterOnClose={() => setRescrapeAfterToastShow(false)}\n        afterShow={rescrapeAfterToastShow}\n      />\n\n      <Grid data={data} />\n\n      <About\n        show={aboutModalShow}\n        onHide={() => setAboutModalShow(false)}\n      />\n      <Faq\n        show={faqModalShow}\n        onHide={() => setFaqModalShow(false)}\n      />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}