{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["useData","useState","data","setData","useEffect","jsonbinAddr","fetch","then","response","json","loadFromJsonbin","renderLink","value","target","rel","href","renderBoolean","renderDecimal","decimalPlaces","toFixed","App","gridOptions","columnDefs","headerName","field","width","cellRenderer","filter","sort","cellRendererFramework","defaultColDef","sortable","resizable","suppressCellSelection","enableCellTextSelection","className","rowData","multiSortKey","onFirstDataRendered","params","columnApi","autoSizeColumns","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.27a363d3.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst loadFromJsonbin = () => {\n  const binId = '5dac6fed5751f76337fd4ac2';\n  const jsonbinAddr = `https://api.jsonbin.io/b/${binId}/latest`;\n\n  return fetch(jsonbinAddr).then(response => response.json());\n};\n\nexport const useData = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    loadFromJsonbin().then(setData);\n  }, []);\n\n  return data;\n};\n","import React from 'react';\nimport './App.css';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham-dark.css';\nimport { useData } from './data';\n\n\nconst renderLink = ({ value }) =>\n  value === null ? value : <a target=\"_blank\" rel=\"noopener noreferrer\" href={value}>Buy</a>;\n\nconst renderBoolean = ({ value }) =>\n      value === null ? '' : value ? 'Yes' : 'No';\n\nconst renderDecimal = (decimalPlaces) => ({ value }) =>\n      value === null ? value : value.toFixed(decimalPlaces);\n\nconst App = () => {\n  const data = useData();\n  const columnDefs = [\n    {headerName: 'Price (USD)', field: 'price', width: 130,\n     cellRenderer: renderDecimal(2), filter: 'agNumberColumnFilter',\n     sort: 'asc'},\n    {headerName: 'Type', field: 'product-type', width: 70},\n    {headerName: 'Model', field: 'model'},\n    {headerName: 'Screen Size', field: 'screen-size', width: 70,\n     cellRenderer: renderDecimal(1), filter: 'agNumberColumnFilter'},\n    {headerName: 'Resolution', field: 'resolution', width: 100},\n    {headerName: 'IPS Screen?', field: 'screen-has-ips', width: 70,\n     cellRenderer: renderBoolean},\n    {headerName: 'Display', field: 'display-type'},\n    {headerName: 'Memory Size', field: 'memory-size', width: 70},\n    {headerName: 'Hard Drive Type', field: 'hard-drive-type', width: 70},\n    {headerName: 'Hard Drive Size', field: 'hard-drive-size', width: 70},\n    {headerName: 'Processor Brand', field: 'processor-brand', width: 70},\n    {headerName: 'Processor Range', field: 'processor-range', width: 80},\n    {headerName: 'Processor', field: 'processor'},\n    {headerName: 'Wireless', field: 'wireless'},\n    {headerName: 'Graphics', field: 'graphics'},\n    {headerName: 'Touchscreen?', field: 'screen-supports-touch', width: 70,\n     cellRenderer: renderBoolean},\n    {headerName: 'Buy!', field: 'url', width: 70,\n     cellRendererFramework: renderLink},\n    {headerName: 'Hard Drive', field: 'hard-drive'},\n    {headerName: 'Memory', field: 'memory'},\n    {headerName: 'Memory Soldered?', field: 'memory-soldered', width: 70,\n     cellRenderer: renderBoolean},\n    {headerName: 'Processor Cache', field: 'processor-cache', width: 70},\n    {headerName: 'Battery', field: 'battery'},\n    {headerName: 'Warranty', field: 'warranty'},\n    {headerName: 'Operating System', field: 'operating-system'},\n    {headerName: 'Original Price', field: 'orig-price', width: 70,\n     cellRenderer: renderDecimal(2), filter: 'agNumberColumnFilter'},\n    {headerName: 'Pointing Device', field: 'pointing-device'},\n    {headerName: 'Part Number', field: 'part-number'},\n    {headerName: 'Keyboard', field: 'keyboard'},\n    {headerName: 'Bluetooth', field: 'bluetooth', width: 70},\n  ];\n\n  const defaultColDef = {\n    sortable: true,\n    filter: true,\n    resizable: true,\n  };\n\n  const gridOptions = {\n    columnDefs,\n    defaultColDef,\n    suppressCellSelection: true,\n    enableCellTextSelection: true,\n  };\n\n  const onFirstDataRendered = (params) => params.columnApi.autoSizeColumns();\n\n  return (\n    <div className=\"logaze-table\">\n      <div className=\"ag-theme-balham-dark logaze-table-wrapper\">\n        <AgGridReact\n          gridOptions={gridOptions}\n          rowData={data}\n          multiSortKey={'ctrl'}\n          onFirstDataRendered={onFirstDataRendered}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}